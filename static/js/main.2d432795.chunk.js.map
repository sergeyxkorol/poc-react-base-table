{"version":3,"sources":["components/Table.js","utils.js","components/Filter.js","components/EditableCell.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","data","columns","count","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","dataKey","id","parentId","generateData","defaultSort","key","order","SortOrder","ASC","useState","sortedData","setSortedData","sortBy","setSortBy","tableRef","useRef","ref","width","height","onColumnSort","reverse","cellProps","onMouseEnter","current","getDOMNode","classList","add","onMouseLeave","remove","headerCellProps","fixed","Filter","onChange","handleChange","columnKey","className","type","checked","hidden","title","EditableCell","state","value","cellData","e","setState","target","this","PureComponent","App","generatedColumns","generateColumns","cellRenderer","setColumns","fixedColumns","useMemo","frozen","Column","FrozenDirection","LEFT","resizable","sortable","maxWidth","updatedColumns","col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d432795.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport BaseTable, { SortOrder } from \"react-base-table\";\r\nimport { generateData } from \"../utils\";\r\nimport \"react-base-table/styles.css\";\r\nimport \"./Table.scss\";\r\n\r\nexport default function Table({ ...props }) {\r\n  const data = generateData(props.columns, 500);\r\n\r\n  // Sorting\r\n  const defaultSort = { key: \"column-0\", order: SortOrder.ASC };\r\n  const [sortedData, setSortedData] = useState(data);\r\n  const [sortBy, setSortBy] = useState(defaultSort);\r\n\r\n  const onColumnSort = sortBy => {\r\n    setSortBy(sortBy);\r\n    setSortedData(sortedData.reverse());\r\n  };\r\n\r\n  // Columns highlighting\r\n  const tableRef = useRef(null);\r\n\r\n  const cellProps = ({ columnIndex }) => ({\r\n    \"data-col-idx\": columnIndex,\r\n    onMouseEnter: () => {\r\n      const table = tableRef.current.getDOMNode();\r\n      table.classList.add(`active-col-${columnIndex}`);\r\n    },\r\n    onMouseLeave: () => {\r\n      const table = tableRef.current.getDOMNode();\r\n      table.classList.remove(`active-col-${columnIndex}`);\r\n    }\r\n  });\r\n\r\n  const headerCellProps = ({ columnIndex }) => ({\r\n    \"data-col-idx\": columnIndex\r\n  });\r\n\r\n  return (\r\n    <BaseTable\r\n      ref={tableRef}\r\n      columns={props.columns}\r\n      data={sortedData}\r\n      width={props.width}\r\n      height={props.height}\r\n      sortBy={sortBy}\r\n      onColumnSort={onColumnSort}\r\n      cellProps={cellProps}\r\n      headerCellProps={headerCellProps}\r\n      fixed\r\n    />\r\n  );\r\n}\r\n","const generateColumns = (count = 10, prefix = \"column-\", props) =>\r\n  new Array(count).fill(0).map((column, columnIndex) => ({\r\n    ...props,\r\n    key: `${prefix}${columnIndex}`,\r\n    dataKey: `${prefix}${columnIndex}`,\r\n    title: `Column ${columnIndex}`,\r\n    width: 150\r\n  }));\r\n\r\nconst generateData = (columns, count = 200, prefix = \"row-\") =>\r\n  new Array(count).fill(0).map((row, rowIndex) => {\r\n    return columns.reduce(\r\n      (rowData, column, columnIndex) => {\r\n        rowData[column.dataKey] = `Row ${rowIndex} - Col ${columnIndex}`;\r\n        return rowData;\r\n      },\r\n      {\r\n        id: `${prefix}${rowIndex}`,\r\n        parentId: null\r\n      }\r\n    );\r\n  });\r\n\r\nexport { generateColumns, generateData };\r\n","import React from \"react\";\r\nimport \"./Filter.scss\";\r\n\r\nexport default function Filter({ columns, onChange }) {\r\n  function handleChange(columnKey) {\r\n    onChange(columnKey);\r\n  }\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <h3>Filter</h3>\r\n      <ul className=\"filter-list\">\r\n        {columns.map(column => (\r\n          <li key={column.key} className=\"filter-elem\">\r\n            <label className=\"filter-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={column.hidden}\r\n                onChange={() => handleChange(column.key)}\r\n              />\r\n              {column.title}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./EditableCell.scss\";\r\n\r\nexport default class EditableCell extends PureComponent {\r\n  state = {\r\n    value: this.props.cellData\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        value={this.state.value}\r\n        onChange={this.handleChange}\r\n        className=\"editable-cell\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useMemo } from \"react\";\r\nimport { AutoResizer, Column } from \"react-base-table\";\r\nimport Table from \"./components/Table\";\r\nimport Filter from \"./components/Filter\";\r\nimport EditableCell from \"./components/EditableCell\";\r\nimport { generateColumns } from \"./utils\";\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  const generatedColumns = generateColumns(10);\r\n  generatedColumns[1].cellRenderer = EditableCell;\r\n\r\n  const [columns, setColumns] = useState(generatedColumns);\r\n\r\n  function handleFilter(columnKey, value) {\r\n    const updatedColumns = columns.map(col => {\r\n      const column = col;\r\n      if (column.key === columnKey) {\r\n        column.hidden = !column.hidden;\r\n      }\r\n      return column;\r\n    });\r\n    setColumns(updatedColumns);\r\n  }\r\n\r\n  // Columns settings\r\n  const fixedColumns = useMemo(\r\n    () =>\r\n      columns.map((column, columnIndex) => {\r\n        let frozen;\r\n        if (columnIndex < 1) frozen = Column.FrozenDirection.LEFT;\r\n\r\n        return {\r\n          ...column,\r\n          frozen,\r\n          hidden: column.hidden,\r\n          resizable: true,\r\n          sortable: true,\r\n          maxWidth: 300\r\n        };\r\n      }),\r\n    [columns]\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-filter\">\r\n        <Filter columns={columns} onChange={handleFilter} />\r\n      </div>\r\n      <div className=\"App-table\">\r\n        <AutoResizer>\r\n          {props => <Table {...props} columns={fixedColumns} />}\r\n        </AutoResizer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}