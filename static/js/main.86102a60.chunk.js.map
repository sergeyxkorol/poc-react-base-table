{"version":3,"sources":["components/Table.js","utils.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Table","columns","data","count","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","dataKey","id","parentId","generateData","defaultSort","key","order","SortOrder","ASC","useState","sortedData","setSortedData","sortBy","setSortBy","tableRef","useRef","ref","width","height","onColumnSort","reverse","cellProps","onMouseEnter","current","getDOMNode","classList","add","onMouseLeave","remove","headerCellProps","fixed","Filter","onChange","handleChange","columnKey","className","type","checked","hidden","title","App","props","generateColumns","setColumns","fixedColumns","useMemo","frozen","Column","FrozenDirection","LEFT","resizable","sortable","maxWidth","value","updatedColumns","col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86102a60.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport BaseTable, { SortOrder } from \"react-base-table\";\r\nimport { generateData } from \"../utils\";\r\nimport \"react-base-table/styles.css\";\r\nimport \"./Table.scss\";\r\n\r\nexport default function Table({ columns }) {\r\n  const data = generateData(columns, 500);\r\n\r\n  // Sorting\r\n  const defaultSort = { key: \"column-0\", order: SortOrder.ASC };\r\n  const [sortedData, setSortedData] = useState(data);\r\n  const [sortBy, setSortBy] = useState(defaultSort);\r\n\r\n  const onColumnSort = sortBy => {\r\n    setSortBy(sortBy);\r\n    setSortedData(sortedData.reverse());\r\n  };\r\n\r\n  // Columns highlighting\r\n  const tableRef = useRef(null);\r\n\r\n  const cellProps = ({ columnIndex }) => ({\r\n    \"data-col-idx\": columnIndex,\r\n    onMouseEnter: () => {\r\n      const table = tableRef.current.getDOMNode();\r\n      table.classList.add(`active-col-${columnIndex}`);\r\n    },\r\n    onMouseLeave: () => {\r\n      const table = tableRef.current.getDOMNode();\r\n      table.classList.remove(`active-col-${columnIndex}`);\r\n    }\r\n  });\r\n\r\n  const headerCellProps = ({ columnIndex }) => ({\r\n    \"data-col-idx\": columnIndex\r\n  });\r\n\r\n  return (\r\n    <BaseTable\r\n      ref={tableRef}\r\n      columns={columns}\r\n      data={sortedData}\r\n      width={1000}\r\n      height={400}\r\n      sortBy={sortBy}\r\n      onColumnSort={onColumnSort}\r\n      cellProps={cellProps}\r\n      headerCellProps={headerCellProps}\r\n      fixed\r\n    />\r\n  );\r\n}\r\n","const generateColumns = (count = 10, prefix = \"column-\", props) =>\r\n  new Array(count).fill(0).map((column, columnIndex) => ({\r\n    ...props,\r\n    key: `${prefix}${columnIndex}`,\r\n    dataKey: `${prefix}${columnIndex}`,\r\n    title: `Column ${columnIndex}`,\r\n    width: 150\r\n  }));\r\n\r\nconst generateData = (columns, count = 200, prefix = \"row-\") =>\r\n  new Array(count).fill(0).map((row, rowIndex) => {\r\n    return columns.reduce(\r\n      (rowData, column, columnIndex) => {\r\n        rowData[column.dataKey] = `Row ${rowIndex} - Col ${columnIndex}`;\r\n        return rowData;\r\n      },\r\n      {\r\n        id: `${prefix}${rowIndex}`,\r\n        parentId: null\r\n      }\r\n    );\r\n  });\r\n\r\nexport { generateColumns, generateData };\r\n","import React from \"react\";\r\nimport \"./Filter.scss\";\r\n\r\nexport default function Filter({ columns, onChange }) {\r\n  function handleChange(columnKey) {\r\n    onChange(columnKey);\r\n  }\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <h3>Filter</h3>\r\n      <ul className=\"filter-list\">\r\n        {columns.map(column => (\r\n          <li key={column.key} className=\"filter-elem\">\r\n            <label className=\"filter-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={column.hidden}\r\n                onChange={() => handleChange(column.key)}\r\n              />\r\n              {column.title}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useMemo } from \"react\";\nimport { Column } from \"react-base-table\";\nimport Table from \"./components/Table\";\nimport Filter from \"./components/Filter\";\nimport { generateColumns } from \"./utils\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [columns, setColumns] = useState(generateColumns(10));\n\n  function handleFilter(columnKey, value) {\n    const updatedColumns = columns.map(col => {\n      const column = col;\n      if (column.key === columnKey) {\n        column.hidden = !column.hidden;\n      }\n      return column;\n    });\n    setColumns(updatedColumns);\n  }\n\n  // Columns settings\n  const fixedColumns = useMemo(\n    () =>\n      columns.map((column, columnIndex) => {\n        let frozen;\n        if (columnIndex < 1) frozen = Column.FrozenDirection.LEFT;\n\n        return {\n          ...column,\n          frozen,\n          hidden: column.hidden,\n          resizable: true,\n          sortable: true,\n          maxWidth: 300\n        };\n      }),\n    [columns]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-filter\">\n        <Filter columns={columns} onChange={handleFilter} />\n      </div>\n      <div className=\"App-table\">\n        <Table columns={fixedColumns} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}